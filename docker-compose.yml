version: '3.6'

volumes:
  rabbitmq_data:
    driver: local

services:
  # Rabbit MQ Stomp
  rabbitmq-stomp:
    build: 
      context: ./rabbitmq_stomp
    container_name: rabbitmq-stomp
    volumes:
      - 'rabbitmq_data:/var/lib/rabbitmq'
    ports:
      - '8081:15672'

  # MongoDB
  mongo-db:
    image: mongo
    container_name: mongo-db
    env_file:
      - .env
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DB}

  # Web-based MongoDB admin interface, written with Node.js and express
  mongo-express-web:
    image: mongo-express
    container_name: mongo-express-web
    env_file:
      - .env
    restart: always
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo-db
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_AUTH_DATABASE=admin
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_ROOT_USER}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_ROOT_PASSWORD}
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGOEXPRESS_LOGIN}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGOEXPRESS_PASSWORD}
    depends_on:
      - mongo-db
    ports:
      - "8082:8081"

  ## WebSocket Stomp Server
  websocket-stomp-server:
    image: ssanchez11/websocket_stomp_server:0.0.1-SNAPSHOT
    container_name: websocket-stomp-server
    restart: unless-stopped

  ## WebSocket Client Producer Server
  websocket-client-producer-service:
    image: ssanchez11/websocket_client_producer_service:0.0.1-SNAPSHOT
    container_name: websocket-client-producer-service
    ports:
      - "8080:8080"
    restart: unless-stopped


  ## WebSocket Client Consumer Service
  websocket-client-consumer-service:
    image: ssanchez11/websocket_client_consumer_service:0.0.1-SNAPSHOT
    container_name: websocket-client-consumer-service
    restart: unless-stopped
    


  
      
      